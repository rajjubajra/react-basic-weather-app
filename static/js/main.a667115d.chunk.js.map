{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","Form","onSubmit","getWeather","type","name","placeholder","onChange","handleOnChange","value","city","country","Weather","className","temparature","humidity","description","initalStates","emptyField","isloading","notfound","units","API_KEY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","console","log","setState","defineProperty","target","_ref","asyncToGenerator","regenerator_default","mark","_callee","api_call","Data","wrap","_context","prev","next","preventDefault","state","fetch","concat","sent","json","cod","sys","main","temp","weather","stop","_x","apply","arguments","components_Title","components_Form","components_Weather","sunrise","sunset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a667115d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = (props) => {\n  return(\n    <div>\n      <h1>Weather Forcast</h1>\n      <p>Find weather condition of your city</p>\n    </div>\n  )\n}\nexport default Title;","import React from 'react';\n\n\n\nconst Form = (props) => {\n  return(\n    <div>\n      <form onSubmit={props.getWeather}>\n        <input \n          type='text' \n          name='city' \n          placeholder='City name' \n          onChange={props.handleOnChange}\n          value={props.city}\n          \n        />\n        <input \n          type='text' \n          name='country' \n          placeholder='Country' \n          onChange={props.handleOnChange}\n          value={props.country}\n        />\n        <button>Get Weather</button>\n      </form>\n    </div>\n  )\n}\nexport default Form;","import React from 'react';\n\n\n\nconst Sunrise = (props) =>{\n  return(\n    <div>\n      Sunrise time?\n    {/* {props.sunrise && 'Sunrise: ' + props.sunrise } */}\n    </div>\n  )\n}\n\n\nconst Weather = (props) => {\n  return(\n    <div className='weather'>\n      <p>{props.city  && props.country ? props.city +','+ props.country : ''}</p>   \n      <p>{props.temparature ? 'Temparature: ' + props.temparature + ' deg C' : ''}</p>\n      <p>{props.humidity ? 'Humidity: ' + props.humidity : ''}</p>\n      <p>{props.description ? 'Description: ' +  props.description : ''}</p> \n    </div>\n  )\n}\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n/** CSS STYLE */\nconst initalStates = {\n  city: '',\n  country: '',\n  temparature: '',\n  humidity: '',\n  description: '',\n  emptyField: false,\n  isloading: false,\n  notfound: false,\n  units: 'metric'\n}\n\n\n\nconst API_KEY = '74ee083f72b903f23ab071da1167d7b2';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = initalStates;\n  }\n   \n  \n\n    handleOnChange = (event) => {\n      console.log('HANDLE CHANGED');\n      this.setState({[event.target.name]: event.target.value })\n      //console.log('city name', this.state.city, 'country ', this.state.country);\n    }\n\n\n    /** request weather api data on submit form */\n    getWeather = async (event) => {\n      \n      event.preventDefault();\n\n      let city = this.state.city;\n      let country = this.state.country;\n\n      if(city && country){\n              /** Call api */\n              const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=${this.state.units}&appid=${API_KEY}`)\n              \n              const Data = await api_call.json()\n\n              /** Throw data not found message if status 404 */\n              // Data.cod === '404' && this.setState({notfound: true});\n\n              if(Data.cod === '404'){\n                    this.setState(initalStates);\n                    this.setState({notfound: true})\n              }else{\n                    /**Populate respective states */\n                    Data && this.setState({isloading: true});\n                    this.setState({\n                                      city: Data.name,\n                                      country: Data.sys.country,\n                                      temparature: Data.main.temp,\n                                      humidity: Data.main.humidity,\n                                      description: Data.weather[0].description,\n                                      notfound: false,\n                                      emptyField: false\n                                   })    \n              }\n\n      }else{\n              this.setState(initalStates);\n              this.setState({emptyField: true});  \n      }\n\n    \n\n  }\n\n  componentDidMount(){\n    console.log(\n      'EMPTY FIELD', this.state.emptyField,\n      'isloading', this.state.isloading, \n      'NOT FOUND', this.state.notfound\n      );\n  }\n\n\n  componentWillUnmount(){\n    /**clean all states after render */\n    console.log('unMount');\n   \n  }\n\n  render() {\n      console.log('RENDER');\n      return (\n      <div className=\"App\">\n              \n              <Title />\n\n            <section>\n\n                   <div>\n                      \n                    {this.state.emptyField &&  <div className='errormsg'>Form fields are empty</div> }\n                    {this.state.notfound &&  <div className='errormsg'>Please enter valid City and Country</div> }\n                      \n                      <Form \n                        getWeather={this.getWeather} \n                        city={this.state.city} \n                        country={this.state.country} \n                        handleOnChange={this.handleOnChange}\n                      />\n                    </div>\n\n                    <div>\n                      {\n                        <Weather \n                            city={this.state.city}\n                            country={this.state.country}\n                            temparature={this.state.temparature}\n                            humidity={this.state.humidity}\n                            description={this.state.description}\n                            sunrise={this.state.sunrise}\n                            sunset={this.state.sunset}\n                        />\n                      }  \n                   </div>\n            </section>             \n\n      </div>);  \n      }\n\n      \n          \n   \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}